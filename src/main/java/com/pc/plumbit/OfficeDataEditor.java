/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pc.plumbit;

import com.pc.exceptions.InvalidInputException;
import com.pc.plumbit.enums.StandardType;
import com.pc.plumbit.model.input.OfficeData;
import com.pc.plumbit.model.StandardValues;
import com.pc.utils.DataUtils;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Prashant
 */
public class OfficeDataEditor extends javax.swing.JFrame {

    private static final Logger log = LoggerFactory.getLogger(OfficeDataEditor.class);
    private List<OfficeData> officeList;
    private int index;
    private SaveListener saveListener;
    private HashMap<StandardType, StandardValues> standardValMap;
            
    /**
     * Creates new form OfficeDataEditor
     * @param officeList
     * @param index
     * @param saveListener
     */
    public OfficeDataEditor(List<OfficeData> officeList, int index, HashMap<StandardType, StandardValues> standardValMap, SaveListener saveListener) {
        initComponents();
        this.officeList = officeList;
        this.index = index;
        this.saveListener = saveListener;
        this.standardValMap = standardValMap;
        setOfficeData(officeList.get(index));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        officeShowroomPanel = new javax.swing.JPanel();
        jLabel82 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        officeFloorNrInput = new javax.swing.JTextField();
        jLabel83 = new javax.swing.JLabel();
        officeAreaInput = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        nrOfShiftsInput = new javax.swing.JTextField();
        saveOfficeDataBtn = new javax.swing.JButton();
        nrFloorInput = new javax.swing.JComboBox<>();
        officeType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel82.setText("Floor Number");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel25.setText("Type");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel26.setText("# of Flats");

        jLabel83.setText("Type Of Area");

        jLabel84.setText("Area (m sq)");

        jLabel85.setText("No. of floors");

        jLabel88.setText("No. of Shifts");

        saveOfficeDataBtn.setText("Save");
        saveOfficeDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOfficeDataBtnActionPerformed(evt);
            }
        });

        nrFloorInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));

        officeType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Office", "Showroom" }));

        javax.swing.GroupLayout officeShowroomPanelLayout = new javax.swing.GroupLayout(officeShowroomPanel);
        officeShowroomPanel.setLayout(officeShowroomPanelLayout);
        officeShowroomPanelLayout.setHorizontalGroup(
            officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(officeShowroomPanelLayout.createSequentialGroup()
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(officeShowroomPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(officeShowroomPanelLayout.createSequentialGroup()
                                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(officeShowroomPanelLayout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel85, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel83, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addComponent(jLabel84, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel88, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nrOfShiftsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(officeAreaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nrFloorInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(officeType, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                        .addComponent(officeFloorNrInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))))))
                    .addGroup(officeShowroomPanelLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(saveOfficeDataBtn)))
                .addGap(0, 41, Short.MAX_VALUE))
        );
        officeShowroomPanelLayout.setVerticalGroup(
            officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(officeShowroomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(officeFloorNrInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel83)
                    .addComponent(officeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel84)
                    .addComponent(officeAreaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nrFloorInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel85))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(officeShowroomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel88)
                    .addComponent(nrOfShiftsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(saveOfficeDataBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(officeShowroomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(officeShowroomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveOfficeDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOfficeDataBtnActionPerformed
        String floorNr = officeFloorNrInput.getText();
        String type =  (String) officeType.getSelectedItem();
        String officeAreaTxt = officeAreaInput.getText();
        int nrOfFloors = Integer.parseInt((String)nrFloorInput.getSelectedItem());
        String nrOfShiftsTxt = nrOfShiftsInput.getText();

        boolean valid = true;
        OfficeData officeData;
        StringBuilder errorMsg = new StringBuilder("Please correct input : ");

        

        if(type.equals("Office")) {
            officeData = new OfficeData(getSqMtrPerPerson(floorNr, StandardType.OFFICE));
            officeData.setType(StandardType.OFFICE);
        } else {
            officeData = new OfficeData(getSqMtrPerPerson(floorNr, StandardType.SHOWROOM));
            officeData.setType(StandardType.SHOWROOM);
        }
        
        officeData.setFloorNumer(floorNr);
        
        try {
            int officeArea = DataUtils.getIntegerVal(officeAreaTxt);
            officeData.setArea(officeArea);
        } catch(InvalidInputException ex) {
            valid = false;
            errorMsg.append("Area\n");
        }

        officeData.setNumberOfFloors(nrOfFloors);

        try {
            float nrOfShifts = Float.parseFloat(nrOfShiftsTxt);
            officeData.setNrOfShifts(nrOfShifts);
        } catch(NumberFormatException ex) {
            valid = false;
            errorMsg.append("No. of shifts\n");
        }

        if(valid) {
            saveListener.onSaveOfficeData(officeData, index);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, errorMsg.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveOfficeDataBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JComboBox<String> nrFloorInput;
    private javax.swing.JTextField nrOfShiftsInput;
    private javax.swing.JTextField officeAreaInput;
    private javax.swing.JTextField officeFloorNrInput;
    private javax.swing.JPanel officeShowroomPanel;
    private javax.swing.JComboBox<String> officeType;
    private javax.swing.JButton saveOfficeDataBtn;
    // End of variables declaration//GEN-END:variables

    private void setOfficeData(OfficeData officeData) {
        officeFloorNrInput.setText(officeData.getFloorNumer());
        officeType.setSelectedItem(officeData.getType().getValue());
        officeAreaInput.setText(String.valueOf(officeData.getArea()));
        nrFloorInput.setSelectedItem(String.valueOf(officeData.getNumberOfFloors()));
        nrOfShiftsInput.setText(String.valueOf(officeData.getNrOfShifts()));
    }
    
    public int getSqMtrPerPerson(String floorNr, StandardType type) {
        if(type.equals(StandardType.OFFICE)){
            return (int) standardValMap.get(StandardType.SQ_MTR_PER_PERSON_OFFICE).getValue();
        } else {
            if(floorNr.toLowerCase().contains("ground")){
                return (int) standardValMap.get(StandardType.SQ_MTR_PER_PERSON_AT_GROUND).getValue();
            } else {
                try {
                    int flrNr = Integer.parseInt(floorNr);
                    if(flrNr > 0) {
                        return (int) standardValMap.get(StandardType.SQ_MTR_PER_PERSON_ABOVE_GROUND).getValue();
                    } else {
                        return (int) standardValMap.get(StandardType.SQ_MTR_PER_PERSON_AT_GROUND).getValue();
                    }
                } catch(NumberFormatException ex) {
                    log.error("error per sqr calculation : ",ex);
                }
                return (int) standardValMap.get(StandardType.SQ_MTR_PER_PERSON_ABOVE_GROUND).getValue();
            }
        }
    }
}
